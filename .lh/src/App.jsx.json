{
    "sourceFile": "src/App.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 10,
            "patches": [
                {
                    "date": 1721744966700,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1721745065817,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,12 +24,12 @@\n } from \"react-leaflet\";\n import \"leaflet/dist/leaflet.css\";\n import L from \"leaflet\";\n import \"leaflet-geometryutil\";\n-import streets from \"../../scripts/yerevan_streets.json\";\n-import easy from \"../../scripts/easy.json\";\n-import xcho from \"../../scripts/xcho.json\";\n-import alik from \"../../scripts/alik.json\";\n+import streets from \".././scripts/yerevan_streets.json\";\n+import easy from \".././scripts/easy.json\";\n+import xcho from \".././scripts/xcho.json\";\n+import alik from \".././scripts/alik.json\";\n import LevelSelection from \"./LevelSelection\";\n import GameModeSelection from \"./GameModeSelection\";\n \n delete L.Icon.Default.prototype._getIconUrl;\n"
                },
                {
                    "date": 1721746583850,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import React, { useState, useEffect, useRef, useMemo } from \"react\";\n+import React, { useState, useEffect, useRef, useMemo, useCallback } from \"react\";\n import {\n   Box,\n   Button,\n   Text,\n@@ -15,34 +15,23 @@\n   ModalCloseButton,\n } from \"@chakra-ui/react\";\n import {\n   MapContainer,\n-  TileLayer,\n   Marker,\n   Polyline,\n   useMap,\n   useMapEvents,\n } from \"react-leaflet\";\n import \"leaflet/dist/leaflet.css\";\n import L from \"leaflet\";\n import \"leaflet-geometryutil\";\n-import streets from \".././scripts/yerevan_streets.json\";\n-import easy from \".././scripts/easy.json\";\n-import xcho from \".././scripts/xcho.json\";\n-import alik from \".././scripts/alik.json\";\n+import streets from \"./scripts/yerevan_streets.json\";\n+import easy from \"./scripts/easy.json\";\n+import xcho from \"./scripts/xcho.json\";\n+import alik from \"./scripts/alik.json\";\n import LevelSelection from \"./LevelSelection\";\n import GameModeSelection from \"./GameModeSelection\";\n \n-delete L.Icon.Default.prototype._getIconUrl;\n-L.Icon.Default.mergeOptions({\n-  iconRetinaUrl:\n-    \"https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon-2x.png\",\n-  iconUrl:\n-    \"https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon.png\",\n-  shadowUrl:\n-    \"https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png\",\n-});\n-\n function calculateDistanceToStreet(map, point, streetPath) {\n   let minDistance = Infinity;\n   for (let i = 0; i < streetPath.length - 1; i++) {\n     const start = L.latLng(streetPath[i]);\n"
                },
                {
                    "date": 1721746625277,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,11 @@\n-import React, { useState, useEffect, useRef, useMemo, useCallback } from \"react\";\n+import React, {\n+  useState,\n+  useEffect,\n+  useRef,\n+  useMemo,\n+  useCallback,\n+} from \"react\";\n import {\n   Box,\n   Button,\n   Text,\n@@ -109,25 +115,31 @@\n       initializeGame();\n     }\n   }, [selectedLevel, selectedMode, streetCount]);\n \n-  const initializeGame = () => {\n+  const initializeGame = useCallback(() => {\n     setScore(0);\n     setGameStats(null);\n     setIsGameOver(false);\n     resetStreetColors();\n-    if (selectedMode === \"endless\") {\n+    if (selectedMode === 'endless') {\n       selectNewStreet(filteredStreets);\n-    } else if (selectedMode === \"challenge\") {\n+    } else if (selectedMode === 'challenge') {\n       const shuffled = [...filteredStreets].sort(() => 0.5 - Math.random());\n       setRemainingStreets(shuffled.slice(0, streetCount));\n       selectNewStreet(shuffled.slice(0, streetCount));\n-    } else if (selectedMode === \"elimination\") {\n+    } else if (selectedMode === 'elimination') {\n       setRemainingStreets([...filteredStreets]);\n       selectNewStreet(filteredStreets);\n     }\n-  };\n+  }, [selectedMode, filteredStreets, streetCount]);\n \n+  useEffect(() => {\n+    if (selectedLevel && selectedMode) {\n+      initializeGame();\n+    }\n+  }, [selectedLevel, selectedMode, initializeGame]);\n+\n   const selectNewStreet = (streetList) => {\n     if (streetList.length === 0) {\n       endGame();\n       return;\n"
                },
                {
                    "date": 1721746636224,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -120,19 +120,19 @@\n     setScore(0);\n     setGameStats(null);\n     setIsGameOver(false);\n     resetStreetColors();\n-    if (selectedMode === 'endless') {\n+    if (selectedMode === \"endless\") {\n       selectNewStreet(filteredStreets);\n-    } else if (selectedMode === 'challenge') {\n+    } else if (selectedMode === \"challenge\") {\n       const shuffled = [...filteredStreets].sort(() => 0.5 - Math.random());\n       setRemainingStreets(shuffled.slice(0, streetCount));\n       selectNewStreet(shuffled.slice(0, streetCount));\n-    } else if (selectedMode === 'elimination') {\n+    } else if (selectedMode === \"elimination\") {\n       setRemainingStreets([...filteredStreets]);\n       selectNewStreet(filteredStreets);\n     }\n-  }, [selectedMode, filteredStreets, streetCount]);\n+  }, [selectedMode, selectNewStreet, filteredStreets, streetCount]);\n \n   useEffect(() => {\n     if (selectedLevel && selectedMode) {\n       initializeGame();\n"
                },
                {
                    "date": 1721746648941,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -130,9 +130,9 @@\n     } else if (selectedMode === \"elimination\") {\n       setRemainingStreets([...filteredStreets]);\n       selectNewStreet(filteredStreets);\n     }\n-  }, [selectedMode, selectNewStreet, filteredStreets, streetCount]);\n+  }, [selectedMode, filteredStreets, streetCount]);\n \n   useEffect(() => {\n     if (selectedLevel && selectedMode) {\n       initializeGame();\n@@ -268,9 +268,9 @@\n           attribution:\n             '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors, &copy; <a href=\"https://carto.com/attribution\">CARTO</a>',\n         }\n       ).addTo(map);\n-    }, [showStreetNames, map]);\n+    }, [map, showStreetNames]);\n \n     return null;\n   };\n \n"
                },
                {
                    "date": 1721746660939,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -113,9 +113,9 @@\n   useEffect(() => {\n     if (selectedLevel && selectedMode) {\n       initializeGame();\n     }\n-  }, [selectedLevel, selectedMode, streetCount]);\n+  }, [initializeGame, selectedLevel, selectedMode, streetCount]);\n \n   const initializeGame = useCallback(() => {\n     setScore(0);\n     setGameStats(null);\n@@ -268,9 +268,9 @@\n           attribution:\n             '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors, &copy; <a href=\"https://carto.com/attribution\">CARTO</a>',\n         }\n       ).addTo(map);\n-    }, [map, showStreetNames]);\n+    }, [map]);\n \n     return null;\n   };\n \n"
                },
                {
                    "date": 1721746666080,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -113,8 +113,9 @@\n   useEffect(() => {\n     if (selectedLevel && selectedMode) {\n       initializeGame();\n     }\n+  // eslint-disable-next-line no-use-before-define\n   }, [initializeGame, selectedLevel, selectedMode, streetCount]);\n \n   const initializeGame = useCallback(() => {\n     setScore(0);\n"
                },
                {
                    "date": 1721746671794,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -113,12 +113,11 @@\n   useEffect(() => {\n     if (selectedLevel && selectedMode) {\n       initializeGame();\n     }\n-  // eslint-disable-next-line no-use-before-define\n-  }, [initializeGame, selectedLevel, selectedMode, streetCount]);\n+  }, [selectedLevel, selectedMode, streetCount]);\n \n-  const initializeGame = useCallback(() => {\n+  const initializeGame = () => {\n     setScore(0);\n     setGameStats(null);\n     setIsGameOver(false);\n     resetStreetColors();\n@@ -131,16 +130,10 @@\n     } else if (selectedMode === \"elimination\") {\n       setRemainingStreets([...filteredStreets]);\n       selectNewStreet(filteredStreets);\n     }\n-  }, [selectedMode, filteredStreets, streetCount]);\n+  };\n \n-  useEffect(() => {\n-    if (selectedLevel && selectedMode) {\n-      initializeGame();\n-    }\n-  }, [selectedLevel, selectedMode, initializeGame]);\n-\n   const selectNewStreet = (streetList) => {\n     if (streetList.length === 0) {\n       endGame();\n       return;\n@@ -269,9 +262,9 @@\n           attribution:\n             '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors, &copy; <a href=\"https://carto.com/attribution\">CARTO</a>',\n         }\n       ).addTo(map);\n-    }, [map]);\n+    }, [showStreetNames, map]);\n \n     return null;\n   };\n \n"
                },
                {
                    "date": 1721746711097,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,11 +1,5 @@\n-import React, {\n-  useState,\n-  useEffect,\n-  useRef,\n-  useMemo,\n-  useCallback,\n-} from \"react\";\n+import React, { useState, useEffect, useRef, useMemo } from \"react\";\n import {\n   Box,\n   Button,\n   Text,\n@@ -29,15 +23,25 @@\n } from \"react-leaflet\";\n import \"leaflet/dist/leaflet.css\";\n import L from \"leaflet\";\n import \"leaflet-geometryutil\";\n-import streets from \"./scripts/yerevan_streets.json\";\n-import easy from \"./scripts/easy.json\";\n-import xcho from \"./scripts/xcho.json\";\n-import alik from \"./scripts/alik.json\";\n+import streets from \"./yerevan_streets.json\";\n+import easy from \"./easy.json\";\n+import xcho from \"./xcho.json\";\n+import alik from \"./alik.json\";\n import LevelSelection from \"./LevelSelection\";\n import GameModeSelection from \"./GameModeSelection\";\n \n+delete L.Icon.Default.prototype._getIconUrl;\n+L.Icon.Default.mergeOptions({\n+  iconRetinaUrl:\n+    \"https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon-2x.png\",\n+  iconUrl:\n+    \"https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon.png\",\n+  shadowUrl:\n+    \"https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png\",\n+});\n+\n function calculateDistanceToStreet(map, point, streetPath) {\n   let minDistance = Infinity;\n   for (let i = 0; i < streetPath.length - 1; i++) {\n     const start = L.latLng(streetPath[i]);\n@@ -113,9 +117,9 @@\n   useEffect(() => {\n     if (selectedLevel && selectedMode) {\n       initializeGame();\n     }\n-  }, [selectedLevel, selectedMode, streetCount]);\n+  }, [initializeGame, selectedLevel, selectedMode, streetCount]);\n \n   const initializeGame = () => {\n     setScore(0);\n     setGameStats(null);\n"
                },
                {
                    "date": 1721747018762,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -117,9 +117,9 @@\n   useEffect(() => {\n     if (selectedLevel && selectedMode) {\n       initializeGame();\n     }\n-  }, [initializeGame, selectedLevel, selectedMode, streetCount]);\n+  }, [selectedLevel, selectedMode, streetCount]);\n \n   const initializeGame = () => {\n     setScore(0);\n     setGameStats(null);\n"
                }
            ],
            "date": 1721744966700,
            "name": "Commit-0",
            "content": "import React, { useState, useEffect, useRef, useMemo } from \"react\";\nimport {\n  Box,\n  Button,\n  Text,\n  VStack,\n  HStack,\n  useToast,\n  Switch,\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalBody,\n  ModalCloseButton,\n} from \"@chakra-ui/react\";\nimport {\n  MapContainer,\n  TileLayer,\n  Marker,\n  Polyline,\n  useMap,\n  useMapEvents,\n} from \"react-leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport L from \"leaflet\";\nimport \"leaflet-geometryutil\";\nimport streets from \"../../scripts/yerevan_streets.json\";\nimport easy from \"../../scripts/easy.json\";\nimport xcho from \"../../scripts/xcho.json\";\nimport alik from \"../../scripts/alik.json\";\nimport LevelSelection from \"./LevelSelection\";\nimport GameModeSelection from \"./GameModeSelection\";\n\ndelete L.Icon.Default.prototype._getIconUrl;\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl:\n    \"https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon-2x.png\",\n  iconUrl:\n    \"https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon.png\",\n  shadowUrl:\n    \"https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png\",\n});\n\nfunction calculateDistanceToStreet(map, point, streetPath) {\n  let minDistance = Infinity;\n  for (let i = 0; i < streetPath.length - 1; i++) {\n    const start = L.latLng(streetPath[i]);\n    const end = L.latLng(streetPath[i + 1]);\n    const distance = L.GeometryUtil.distanceSegment(map, point, start, end);\n    if (distance < minDistance) {\n      minDistance = distance;\n    }\n  }\n  return minDistance;\n}\n\nconst MapEvents = ({ onMapClick, isToastActive }) => {\n  const map = useMap();\n  useMapEvents({\n    click(e) {\n      if (!isToastActive) {\n        onMapClick(e.latlng, map);\n      }\n    },\n  });\n  return null;\n};\n\nconst YerevanStreetGame = () => {\n  const [currentStreet, setCurrentStreet] = useState(null);\n  const [score, setScore] = useState(0);\n  const [marker, setMarker] = useState(null);\n  const [showStreetNames, setShowStreetNames] = useState(false);\n  const [streetColors, setStreetColors] = useState({});\n  const [selectedLevel, setSelectedLevel] = useState(null);\n  const [selectedMode, setSelectedMode] = useState(null);\n  const [streetCount, setStreetCount] = useState(10);\n  const [remainingStreets, setRemainingStreets] = useState([]);\n  const [gameStats, setGameStats] = useState(null);\n  const [isGameOver, setIsGameOver] = useState(false);\n  const [isToastActive, setIsToastActive] = useState(false);\n  const toast = useToast();\n  const mapRef = useRef(null);\n\n  const filteredStreets = useMemo(() => {\n    let streetList = streets;\n    if (selectedLevel === \"easy\") {\n      streetList = streets.filter(({ name }) =>\n        easy.map((e) => e.toLowerCase()).includes(name.toLowerCase())\n      );\n    } else if (selectedLevel === \"xcho\") {\n      streetList = streets.filter(({ name }) =>\n        xcho.map((e) => e.toLowerCase()).includes(name.toLowerCase())\n      );\n    } else if (selectedLevel === \"alik\") {\n      streetList = streets.filter(({ name }) =>\n        alik.map((e) => e.toLowerCase()).includes(name.toLowerCase())\n      );\n    }\n\n    return streetList\n      .filter(\n        ({ name }) =>\n          (name.toLowerCase().includes(\"street\") ||\n            name.toLowerCase().includes(\"highway\") ||\n            name.toLowerCase().includes(\"square\") ||\n            name.toLowerCase().includes(\"avenue\")) &&\n          !name.toLowerCase().includes(\"th \") &&\n          !name.toLowerCase().includes(\"nd \")\n      )\n      .map((street, index) => ({\n        ...street,\n        uniqueId: `${street.name}-${index}`,\n      }));\n  }, [selectedLevel]);\n\n  useEffect(() => {\n    if (selectedLevel && selectedMode) {\n      initializeGame();\n    }\n  }, [selectedLevel, selectedMode, streetCount]);\n\n  const initializeGame = () => {\n    setScore(0);\n    setGameStats(null);\n    setIsGameOver(false);\n    resetStreetColors();\n    if (selectedMode === \"endless\") {\n      selectNewStreet(filteredStreets);\n    } else if (selectedMode === \"challenge\") {\n      const shuffled = [...filteredStreets].sort(() => 0.5 - Math.random());\n      setRemainingStreets(shuffled.slice(0, streetCount));\n      selectNewStreet(shuffled.slice(0, streetCount));\n    } else if (selectedMode === \"elimination\") {\n      setRemainingStreets([...filteredStreets]);\n      selectNewStreet(filteredStreets);\n    }\n  };\n\n  const selectNewStreet = (streetList) => {\n    if (streetList.length === 0) {\n      endGame();\n      return;\n    }\n    const randomStreet =\n      streetList[Math.floor(Math.random() * streetList.length)];\n    setCurrentStreet(randomStreet);\n  };\n\n  const handleMapClick = (latlng, map) => {\n    if (isToastActive) return;\n\n    setMarker(latlng);\n    const clickedStreet = filteredStreets.reduce((closest, street) => {\n      const distance = calculateDistanceToStreet(map, latlng, street.path);\n      return distance < calculateDistanceToStreet(map, latlng, closest.path)\n        ? street\n        : closest;\n    });\n\n    const isCorrect = clickedStreet.name === currentStreet.name;\n\n    setStreetColor(clickedStreet.name, isCorrect ? \"green\" : \"red\");\n\n    setIsToastActive(true);\n\n    if (isCorrect) {\n      setScore(score + 1);\n      toast({\n        title: \"Correct!\",\n        description: `You found ${currentStreet.name}!`,\n        status: \"success\",\n        duration: null,\n        isClosable: true,\n        onCloseComplete: () => {\n          setIsToastActive(false);\n          if (selectedMode === \"elimination\") {\n            const updatedStreets = remainingStreets.filter(\n              (street) => street.name !== currentStreet.name\n            );\n            setRemainingStreets(updatedStreets);\n            setStreetColor(currentStreet.name, \"gray\");\n            if (updatedStreets.length > 0) {\n              selectNewStreet(updatedStreets);\n            } else {\n              endGame();\n            }\n          } else if (selectedMode === \"challenge\") {\n            const updatedStreets = remainingStreets.filter(\n              (street) => street.name !== currentStreet.name\n            );\n            setRemainingStreets(updatedStreets);\n            if (updatedStreets.length > 0) {\n              selectNewStreet(updatedStreets);\n            } else {\n              endGame();\n            }\n          } else {\n            selectNewStreet(filteredStreets);\n          }\n        },\n      });\n    } else {\n      toast({\n        title: \"Incorrect\",\n        description: `That's ${clickedStreet.name}. The correct street is ${currentStreet.name}. Try again!`,\n        status: \"error\",\n        duration: null,\n        isClosable: true,\n        onCloseComplete: () => {\n          setIsToastActive(false);\n          setStreetColor(clickedStreet.name, \"blue\");\n          if (selectedMode === \"challenge\") {\n            const updatedStreets = remainingStreets.filter(\n              (street) => street.name !== currentStreet.name\n            );\n            setRemainingStreets(updatedStreets);\n            if (updatedStreets.length > 0) {\n              selectNewStreet(updatedStreets);\n            } else {\n              endGame();\n            }\n          }\n        },\n      });\n    }\n  };\n\n  const resetStreetColors = () => {\n    setStreetColors({});\n  };\n\n  const setStreetColor = (streetName, color) => {\n    setStreetColors((prevColors) => ({\n      ...prevColors,\n      [streetName]: color,\n    }));\n  };\n\n  const endGame = () => {\n    const totalStreets = filteredStreets.length;\n    const percentCorrect = (score / totalStreets) * 100;\n    setGameStats({\n      totalStreets,\n      correctGuesses: score,\n      percentCorrect: percentCorrect.toFixed(2),\n    });\n    setIsGameOver(true);\n  };\n\n  const MapTileLayer = () => {\n    const map = useMap();\n\n    useEffect(() => {\n      map.eachLayer((layer) => {\n        if (layer instanceof L.TileLayer) {\n          map.removeLayer(layer);\n        }\n      });\n\n      L.tileLayer(\n        showStreetNames\n          ? \"https://{s}.basemaps.cartocdn.com/rastertiles/voyager/{z}/{x}/{y}.png\"\n          : \"https://{s}.basemaps.cartocdn.com/rastertiles/voyager_nolabels/{z}/{x}/{y}.png\",\n        {\n          attribution:\n            '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors, &copy; <a href=\"https://carto.com/attribution\">CARTO</a>',\n        }\n      ).addTo(map);\n    }, [showStreetNames, map]);\n\n    return null;\n  };\n\n  if (!selectedLevel) {\n    return (\n      <LevelSelection\n        onSelectLevel={setSelectedLevel}\n        selectedLevel={selectedLevel}\n      />\n    );\n  }\n\n  if (!selectedMode) {\n    return (\n      <GameModeSelection\n        onSelectMode={setSelectedMode}\n        onSelectStreetCount={setStreetCount}\n      />\n    );\n  }\n\n  return (\n    <VStack spacing={4} width=\"100%\" height=\"100vh\" p={4}>\n      <Text fontSize=\"2xl\">\n        Yerevan Street Game - {selectedLevel.toUpperCase()} Level -{\" \"}\n        {selectedMode.toUpperCase()} Mode\n      </Text>\n      <Text>Find: {currentStreet?.name}</Text>\n      <Text>Score: {score}</Text>\n      {selectedMode === \"elimination\" && (\n        <Text>Remaining Streets: {remainingStreets.length}</Text>\n      )}\n      <Box width=\"100%\" height=\"70vh\">\n        <MapContainer\n          center={[40.1872, 44.5152]}\n          zoom={13}\n          style={{ height: \"100%\", width: \"100%\" }}\n          ref={mapRef}\n        >\n          <MapTileLayer />\n          <MapEvents\n            onMapClick={handleMapClick}\n            isToastActive={isToastActive}\n          />\n          {marker && <Marker position={marker} />}\n          {filteredStreets.map((street) => (\n            <Polyline\n              key={street.uniqueId}\n              positions={street.path}\n              pathOptions={{\n                color: streetColors[street.name] || \"blue\",\n                weight: streetColors[street.name] ? 4 : 2,\n              }}\n            />\n          ))}\n        </MapContainer>\n      </Box>\n      <HStack>\n        <Switch\n          isChecked={showStreetNames}\n          onChange={(e) => setShowStreetNames(e.target.checked)}\n        />\n        <Text>Show Street Names</Text>\n      </HStack>\n      <Button\n        onClick={() => {\n          setSelectedLevel(null);\n          setSelectedMode(null);\n        }}\n      >\n        Change Level/Mode\n      </Button>\n\n      <Modal isOpen={isGameOver} onClose={() => setIsGameOver(false)}>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>Game Over</ModalHeader>\n          <ModalCloseButton />\n          <ModalBody>\n            <Text>Total Streets: {gameStats?.totalStreets}</Text>\n            <Text>Correct Guesses: {gameStats?.correctGuesses}</Text>\n            <Text>Accuracy: {gameStats?.percentCorrect}%</Text>\n            <Button mt={4} onClick={initializeGame}>\n              Play Again\n            </Button>\n          </ModalBody>\n        </ModalContent>\n      </Modal>\n    </VStack>\n  );\n};\n\nexport default YerevanStreetGame;\n"
        }
    ]
}